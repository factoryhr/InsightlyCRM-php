<?php
/**
 * APIOrganisationDate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * APIOrganisationDate Class Doc Comment
 *
 * @category    Class */
 // @description APIOrganisationDate
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APIOrganisationDate implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'APIOrganisationDate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'date_id' => 'int',
        'occasion_name' => 'string',
        'occasion_date' => '\DateTime',
        'repeat_yearly' => 'bool',
        'create_task_yearly' => 'bool'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'date_id' => 'DATE_ID',
        'occasion_name' => 'OCCASION_NAME',
        'occasion_date' => 'OCCASION_DATE',
        'repeat_yearly' => 'REPEAT_YEARLY',
        'create_task_yearly' => 'CREATE_TASK_YEARLY'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'date_id' => 'setDateId',
        'occasion_name' => 'setOccasionName',
        'occasion_date' => 'setOccasionDate',
        'repeat_yearly' => 'setRepeatYearly',
        'create_task_yearly' => 'setCreateTaskYearly'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'date_id' => 'getDateId',
        'occasion_name' => 'getOccasionName',
        'occasion_date' => 'getOccasionDate',
        'repeat_yearly' => 'getRepeatYearly',
        'create_task_yearly' => 'getCreateTaskYearly'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date_id'] = isset($data['date_id']) ? $data['date_id'] : null;
        $this->container['occasion_name'] = isset($data['occasion_name']) ? $data['occasion_name'] : null;
        $this->container['occasion_date'] = isset($data['occasion_date']) ? $data['occasion_date'] : null;
        $this->container['repeat_yearly'] = isset($data['repeat_yearly']) ? $data['repeat_yearly'] : null;
        $this->container['create_task_yearly'] = isset($data['create_task_yearly']) ? $data['create_task_yearly'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets date_id
     * @return int
     */
    public function getDateId()
    {
        return $this->container['date_id'];
    }

    /**
     * Sets date_id
     * @param int $date_id Unique ID for the Organisation Date record
     * @return $this
     */
    public function setDateId($date_id)
    {
        $this->container['date_id'] = $date_id;

        return $this;
    }

    /**
     * Gets occasion_name
     * @return string
     */
    public function getOccasionName()
    {
        return $this->container['occasion_name'];
    }

    /**
     * Sets occasion_name
     * @param string $occasion_name Occasion Name of the Organisation Date
     * @return $this
     */
    public function setOccasionName($occasion_name)
    {
        $this->container['occasion_name'] = $occasion_name;

        return $this;
    }

    /**
     * Gets occasion_date
     * @return \DateTime
     */
    public function getOccasionDate()
    {
        return $this->container['occasion_date'];
    }

    /**
     * Sets occasion_date
     * @param \DateTime $occasion_date Occasion date, in YYYY-MM-DD HH:MM:SS format
     * @return $this
     */
    public function setOccasionDate($occasion_date)
    {
        $this->container['occasion_date'] = $occasion_date;

        return $this;
    }

    /**
     * Gets repeat_yearly
     * @return bool
     */
    public function getRepeatYearly()
    {
        return $this->container['repeat_yearly'];
    }

    /**
     * Sets repeat_yearly
     * @param bool $repeat_yearly True, if Occasion occurs each year
     * @return $this
     */
    public function setRepeatYearly($repeat_yearly)
    {
        $this->container['repeat_yearly'] = $repeat_yearly;

        return $this;
    }

    /**
     * Gets create_task_yearly
     * @return bool
     */
    public function getCreateTaskYearly()
    {
        return $this->container['create_task_yearly'];
    }

    /**
     * Sets create_task_yearly
     * @param bool $create_task_yearly True, to create a reminder each year
     * @return $this
     */
    public function setCreateTaskYearly($create_task_yearly)
    {
        $this->container['create_task_yearly'] = $create_task_yearly;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


