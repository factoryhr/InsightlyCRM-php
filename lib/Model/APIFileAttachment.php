<?php
/**
 * APIFileAttachment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * APIFileAttachment Class Doc Comment
 *
 * @category    Class */
 // @description APIFileAttachment
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APIFileAttachment implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'APIFileAttachment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'file_id' => 'int',
        'file_name' => 'string',
        'content_type' => 'string',
        'file_size' => 'int',
        'file_category_id' => 'int',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'url' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'file_id' => 'FILE_ID',
        'file_name' => 'FILE_NAME',
        'content_type' => 'CONTENT_TYPE',
        'file_size' => 'FILE_SIZE',
        'file_category_id' => 'FILE_CATEGORY_ID',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'url' => 'URL'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'file_id' => 'setFileId',
        'file_name' => 'setFileName',
        'content_type' => 'setContentType',
        'file_size' => 'setFileSize',
        'file_category_id' => 'setFileCategoryId',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'url' => 'setUrl'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'file_id' => 'getFileId',
        'file_name' => 'getFileName',
        'content_type' => 'getContentType',
        'file_size' => 'getFileSize',
        'file_category_id' => 'getFileCategoryId',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'url' => 'getUrl'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['file_size'] = isset($data['file_size']) ? $data['file_size'] : null;
        $this->container['file_category_id'] = isset($data['file_category_id']) ? $data['file_category_id'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if ($this->container['file_name'] === null) {
            $invalid_properties[] = "'file_name' can't be null";
        }
        if ((strlen($this->container['file_name']) > 500)) {
            $invalid_properties[] = "invalid value for 'file_name', the character length must be smaller than or equal to 500.";
        }

        if ((strlen($this->container['file_name']) < 0)) {
            $invalid_properties[] = "invalid value for 'file_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['content_type'] === null) {
            $invalid_properties[] = "'content_type' can't be null";
        }
        if ((strlen($this->container['content_type']) > 255)) {
            $invalid_properties[] = "invalid value for 'content_type', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['content_type']) < 0)) {
            $invalid_properties[] = "invalid value for 'content_type', the character length must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if ($this->container['file_name'] === null) {
            return false;
        }
        if (strlen($this->container['file_name']) > 500) {
            return false;
        }
        if (strlen($this->container['file_name']) < 0) {
            return false;
        }
        if ($this->container['content_type'] === null) {
            return false;
        }
        if (strlen($this->container['content_type']) > 255) {
            return false;
        }
        if (strlen($this->container['content_type']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets file_id
     * @return int
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     * @param int $file_id Unique ID for the File Attachment record
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets file_name
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     * @param string $file_name The name and extension of the File Attachment
     * @return $this
     */
    public function setFileName($file_name)
    {
        if (strlen($file_name) > 500) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling APIFileAttachment., must be smaller than or equal to 500.');
        }
        if (strlen($file_name) < 0) {
            throw new \InvalidArgumentException('invalid length for $file_name when calling APIFileAttachment., must be bigger than or equal to 0.');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets content_type
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     * @param string $content_type The MIME type of the File Attachment
     * @return $this
     */
    public function setContentType($content_type)
    {
        if (strlen($content_type) > 255) {
            throw new \InvalidArgumentException('invalid length for $content_type when calling APIFileAttachment., must be smaller than or equal to 255.');
        }
        if (strlen($content_type) < 0) {
            throw new \InvalidArgumentException('invalid length for $content_type when calling APIFileAttachment., must be bigger than or equal to 0.');
        }
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets file_size
     * @return int
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     * @param int $file_size The size of the File Attachment, in bytes
     * @return $this
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets file_category_id
     * @return int
     */
    public function getFileCategoryId()
    {
        return $this->container['file_category_id'];
    }

    /**
     * Sets file_category_id
     * @param int $file_category_id The category of the File Attachment, if it has been assigned to one
     * @return $this
     */
    public function setFileCategoryId($file_category_id)
    {
        $this->container['file_category_id'] = $file_category_id;

        return $this;
    }

    /**
     * Gets owner_user_id
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     * @param int $owner_user_id The User ID of the File Attachment owner
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     * @param \DateTime $date_created_utc Date and time File Attachment record created, as Coordinated Universal Time
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     * @param \DateTime $date_updated_utc Date and time File Attachment record updated, as Coordinated Universal Time
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url URL of the File Attachment
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


