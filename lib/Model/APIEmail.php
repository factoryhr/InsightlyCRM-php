<?php
/**
 * APIEmail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * APIEmail Class Doc Comment
 *
 * @category    Class */
 // @description APIEmail
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APIEmail implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'APIEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'email_id' => 'int',
        'gmail_message_id' => 'string',
        'email_date_utc' => '\DateTime',
        'email_from' => 'string',
        'email_to' => 'string',
        'email_cc' => 'string',
        'subject' => 'string',
        'body' => 'string',
        'body_extract' => 'string',
        'format' => 'string',
        'size' => 'int',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'visible_to' => 'string',
        'visible_team_id' => 'int',
        'visible_user_ids' => 'string',
        'emaillinks' => '\Swagger\Client\Model\APIEmailLink[]',
        'tags' => '\Swagger\Client\Model\APITag[]'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'email_id' => 'EMAIL_ID',
        'gmail_message_id' => 'GMAIL_MESSAGE_ID',
        'email_date_utc' => 'EMAIL_DATE_UTC',
        'email_from' => 'EMAIL_FROM',
        'email_to' => 'EMAIL_TO',
        'email_cc' => 'EMAIL_CC',
        'subject' => 'SUBJECT',
        'body' => 'BODY',
        'body_extract' => 'BODY_EXTRACT',
        'format' => 'FORMAT',
        'size' => 'SIZE',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'visible_to' => 'VISIBLE_TO',
        'visible_team_id' => 'VISIBLE_TEAM_ID',
        'visible_user_ids' => 'VISIBLE_USER_IDS',
        'emaillinks' => 'EMAILLINKS',
        'tags' => 'TAGS'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'email_id' => 'setEmailId',
        'gmail_message_id' => 'setGmailMessageId',
        'email_date_utc' => 'setEmailDateUtc',
        'email_from' => 'setEmailFrom',
        'email_to' => 'setEmailTo',
        'email_cc' => 'setEmailCc',
        'subject' => 'setSubject',
        'body' => 'setBody',
        'body_extract' => 'setBodyExtract',
        'format' => 'setFormat',
        'size' => 'setSize',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'visible_to' => 'setVisibleTo',
        'visible_team_id' => 'setVisibleTeamId',
        'visible_user_ids' => 'setVisibleUserIds',
        'emaillinks' => 'setEmaillinks',
        'tags' => 'setTags'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'email_id' => 'getEmailId',
        'gmail_message_id' => 'getGmailMessageId',
        'email_date_utc' => 'getEmailDateUtc',
        'email_from' => 'getEmailFrom',
        'email_to' => 'getEmailTo',
        'email_cc' => 'getEmailCc',
        'subject' => 'getSubject',
        'body' => 'getBody',
        'body_extract' => 'getBodyExtract',
        'format' => 'getFormat',
        'size' => 'getSize',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'visible_to' => 'getVisibleTo',
        'visible_team_id' => 'getVisibleTeamId',
        'visible_user_ids' => 'getVisibleUserIds',
        'emaillinks' => 'getEmaillinks',
        'tags' => 'getTags'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['email_id'] = isset($data['email_id']) ? $data['email_id'] : null;
        $this->container['gmail_message_id'] = isset($data['gmail_message_id']) ? $data['gmail_message_id'] : null;
        $this->container['email_date_utc'] = isset($data['email_date_utc']) ? $data['email_date_utc'] : null;
        $this->container['email_from'] = isset($data['email_from']) ? $data['email_from'] : null;
        $this->container['email_to'] = isset($data['email_to']) ? $data['email_to'] : null;
        $this->container['email_cc'] = isset($data['email_cc']) ? $data['email_cc'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['body_extract'] = isset($data['body_extract']) ? $data['body_extract'] : null;
        $this->container['format'] = isset($data['format']) ? $data['format'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['visible_to'] = isset($data['visible_to']) ? $data['visible_to'] : null;
        $this->container['visible_team_id'] = isset($data['visible_team_id']) ? $data['visible_team_id'] : null;
        $this->container['visible_user_ids'] = isset($data['visible_user_ids']) ? $data['visible_user_ids'] : null;
        $this->container['emaillinks'] = isset($data['emaillinks']) ? $data['emaillinks'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['gmail_message_id']) && (strlen($this->container['gmail_message_id']) > 20)) {
            $invalid_properties[] = "invalid value for 'gmail_message_id', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['gmail_message_id']) && (strlen($this->container['gmail_message_id']) < 0)) {
            $invalid_properties[] = "invalid value for 'gmail_message_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_from']) && (strlen($this->container['email_from']) > 500)) {
            $invalid_properties[] = "invalid value for 'email_from', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['email_from']) && (strlen($this->container['email_from']) < 0)) {
            $invalid_properties[] = "invalid value for 'email_from', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['subject']) && (strlen($this->container['subject']) > 500)) {
            $invalid_properties[] = "invalid value for 'subject', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['subject']) && (strlen($this->container['subject']) < 0)) {
            $invalid_properties[] = "invalid value for 'subject', the character length must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['gmail_message_id']) > 20) {
            return false;
        }
        if (strlen($this->container['gmail_message_id']) < 0) {
            return false;
        }
        if (strlen($this->container['email_from']) > 500) {
            return false;
        }
        if (strlen($this->container['email_from']) < 0) {
            return false;
        }
        if (strlen($this->container['subject']) > 500) {
            return false;
        }
        if (strlen($this->container['subject']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets email_id
     * @return int
     */
    public function getEmailId()
    {
        return $this->container['email_id'];
    }

    /**
     * Sets email_id
     * @param int $email_id Unique ID for the email record
     * @return $this
     */
    public function setEmailId($email_id)
    {
        $this->container['email_id'] = $email_id;

        return $this;
    }

    /**
     * Gets gmail_message_id
     * @return string
     */
    public function getGmailMessageId()
    {
        return $this->container['gmail_message_id'];
    }

    /**
     * Sets gmail_message_id
     * @param string $gmail_message_id Unique key of the Gmail message
     * @return $this
     */
    public function setGmailMessageId($gmail_message_id)
    {
        if (strlen($gmail_message_id) > 20) {
            throw new \InvalidArgumentException('invalid length for $gmail_message_id when calling APIEmail., must be smaller than or equal to 20.');
        }
        if (strlen($gmail_message_id) < 0) {
            throw new \InvalidArgumentException('invalid length for $gmail_message_id when calling APIEmail., must be bigger than or equal to 0.');
        }
        $this->container['gmail_message_id'] = $gmail_message_id;

        return $this;
    }

    /**
     * Gets email_date_utc
     * @return \DateTime
     */
    public function getEmailDateUtc()
    {
        return $this->container['email_date_utc'];
    }

    /**
     * Sets email_date_utc
     * @param \DateTime $email_date_utc Date and time email sent, as Coordinated Universal Time
     * @return $this
     */
    public function setEmailDateUtc($email_date_utc)
    {
        $this->container['email_date_utc'] = $email_date_utc;

        return $this;
    }

    /**
     * Gets email_from
     * @return string
     */
    public function getEmailFrom()
    {
        return $this->container['email_from'];
    }

    /**
     * Sets email_from
     * @param string $email_from From address of the email
     * @return $this
     */
    public function setEmailFrom($email_from)
    {
        if (strlen($email_from) > 500) {
            throw new \InvalidArgumentException('invalid length for $email_from when calling APIEmail., must be smaller than or equal to 500.');
        }
        if (strlen($email_from) < 0) {
            throw new \InvalidArgumentException('invalid length for $email_from when calling APIEmail., must be bigger than or equal to 0.');
        }
        $this->container['email_from'] = $email_from;

        return $this;
    }

    /**
     * Gets email_to
     * @return string
     */
    public function getEmailTo()
    {
        return $this->container['email_to'];
    }

    /**
     * Sets email_to
     * @param string $email_to To addresses of the email
     * @return $this
     */
    public function setEmailTo($email_to)
    {
        $this->container['email_to'] = $email_to;

        return $this;
    }

    /**
     * Gets email_cc
     * @return string
     */
    public function getEmailCc()
    {
        return $this->container['email_cc'];
    }

    /**
     * Sets email_cc
     * @param string $email_cc CC addresses of the email
     * @return $this
     */
    public function setEmailCc($email_cc)
    {
        $this->container['email_cc'] = $email_cc;

        return $this;
    }

    /**
     * Gets subject
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     * @param string $subject Subject of the Email
     * @return $this
     */
    public function setSubject($subject)
    {
        if (strlen($subject) > 500) {
            throw new \InvalidArgumentException('invalid length for $subject when calling APIEmail., must be smaller than or equal to 500.');
        }
        if (strlen($subject) < 0) {
            throw new \InvalidArgumentException('invalid length for $subject when calling APIEmail., must be bigger than or equal to 0.');
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets body
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     * @param string $body The body of the Email. This field is empty on list requests.
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets body_extract
     * @return string
     */
    public function getBodyExtract()
    {
        return $this->container['body_extract'];
    }

    /**
     * Sets body_extract
     * @param string $body_extract An extract of the Email body.
     * @return $this
     */
    public function setBodyExtract($body_extract)
    {
        $this->container['body_extract'] = $body_extract;

        return $this;
    }

    /**
     * Gets format
     * @return string
     */
    public function getFormat()
    {
        return $this->container['format'];
    }

    /**
     * Sets format
     * @param string $format Format of the email: text or html
     * @return $this
     */
    public function setFormat($format)
    {
        $this->container['format'] = $format;

        return $this;
    }

    /**
     * Gets size
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     * @param int $size The size of the email, in bytes
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets owner_user_id
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     * @param int $owner_user_id Insightly User ID of the email owner
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     * @param \DateTime $date_created_utc Date and time Email record created, as Coordinated Universal Time
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets visible_to
     * @return string
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     * @param string $visible_to Visible To: Everyone, Owner, Team or Individuals
     * @return $this
     */
    public function setVisibleTo($visible_to)
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets visible_team_id
     * @return int
     */
    public function getVisibleTeamId()
    {
        return $this->container['visible_team_id'];
    }

    /**
     * Sets visible_team_id
     * @param int $visible_team_id If VISIBLE_TO is 'Team', the TEAM_ID
     * @return $this
     */
    public function setVisibleTeamId($visible_team_id)
    {
        $this->container['visible_team_id'] = $visible_team_id;

        return $this;
    }

    /**
     * Gets visible_user_ids
     * @return string
     */
    public function getVisibleUserIds()
    {
        return $this->container['visible_user_ids'];
    }

    /**
     * Sets visible_user_ids
     * @param string $visible_user_ids If VISIBLE_TO is 'Individuals', a comma separated list of user IDs
     * @return $this
     */
    public function setVisibleUserIds($visible_user_ids)
    {
        $this->container['visible_user_ids'] = $visible_user_ids;

        return $this;
    }

    /**
     * Gets emaillinks
     * @return \Swagger\Client\Model\APIEmailLink[]
     */
    public function getEmaillinks()
    {
        return $this->container['emaillinks'];
    }

    /**
     * Sets emaillinks
     * @param \Swagger\Client\Model\APIEmailLink[] $emaillinks Set of links attached to the Email
     * @return $this
     */
    public function setEmaillinks($emaillinks)
    {
        $this->container['emaillinks'] = $emaillinks;

        return $this;
    }

    /**
     * Gets tags
     * @return \Swagger\Client\Model\APITag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \Swagger\Client\Model\APITag[] $tags Set of tags attached to the Email
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


