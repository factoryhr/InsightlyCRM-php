<?php
/**
 * Lead
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Lead Class Doc Comment
 *
 * @category    Class */
 // @description APILead
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Lead implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Lead';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'lead_id' => 'int',
        'salutation' => 'string',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'organization_name' => 'string',
        'phone_number' => 'string',
        'mobile_phone_number' => 'string',
        'fax_number' => 'string',
        'email_address' => 'string',
        'website_url' => 'string',
        'owner_user_id' => 'int',
        'date_created_utc' => '\DateTime',
        'date_updated_utc' => '\DateTime',
        'converted' => 'bool',
        'converted_date_utc' => '\DateTime',
        'converted_contact_id' => 'int',
        'converted_organization_id' => 'int',
        'converted_opportunity_id' => 'int',
        'visible_to' => 'string',
        'responsible_user_id' => 'int',
        'industry' => 'string',
        'lead_status_id' => 'int',
        'lead_source_id' => 'int',
        'visible_team_id' => 'int',
        'employee_count' => 'int',
        'lead_rating' => 'int',
        'lead_description' => 'string',
        'visible_user_ids' => 'string',
        'customfields' => '\Swagger\Client\Model\APICustomField[]',
        'address_street' => 'string',
        'address_city' => 'string',
        'address_state' => 'string',
        'address_postcode' => 'string',
        'address_country' => 'string',
        'tags' => '\Swagger\Client\Model\APITag[]',
        'image_url' => 'string'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'lead_id' => 'LEAD_ID',
        'salutation' => 'SALUTATION',
        'title' => 'TITLE',
        'first_name' => 'FIRST_NAME',
        'last_name' => 'LAST_NAME',
        'organization_name' => 'ORGANIZATION_NAME',
        'phone_number' => 'PHONE_NUMBER',
        'mobile_phone_number' => 'MOBILE_PHONE_NUMBER',
        'fax_number' => 'FAX_NUMBER',
        'email_address' => 'EMAIL_ADDRESS',
        'website_url' => 'WEBSITE_URL',
        'owner_user_id' => 'OWNER_USER_ID',
        'date_created_utc' => 'DATE_CREATED_UTC',
        'date_updated_utc' => 'DATE_UPDATED_UTC',
        'converted' => 'CONVERTED',
        'converted_date_utc' => 'CONVERTED_DATE_UTC',
        'converted_contact_id' => 'CONVERTED_CONTACT_ID',
        'converted_organization_id' => 'CONVERTED_ORGANIZATION_ID',
        'converted_opportunity_id' => 'CONVERTED_OPPORTUNITY_ID',
        'visible_to' => 'VISIBLE_TO',
        'responsible_user_id' => 'RESPONSIBLE_USER_ID',
        'industry' => 'INDUSTRY',
        'lead_status_id' => 'LEAD_STATUS_ID',
        'lead_source_id' => 'LEAD_SOURCE_ID',
        'visible_team_id' => 'VISIBLE_TEAM_ID',
        'employee_count' => 'EMPLOYEE_COUNT',
        'lead_rating' => 'LEAD_RATING',
        'lead_description' => 'LEAD_DESCRIPTION',
        'visible_user_ids' => 'VISIBLE_USER_IDS',
        'customfields' => 'CUSTOMFIELDS',
        'address_street' => 'ADDRESS_STREET',
        'address_city' => 'ADDRESS_CITY',
        'address_state' => 'ADDRESS_STATE',
        'address_postcode' => 'ADDRESS_POSTCODE',
        'address_country' => 'ADDRESS_COUNTRY',
        'tags' => 'TAGS',
        'image_url' => 'IMAGE_URL'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'lead_id' => 'setLeadId',
        'salutation' => 'setSalutation',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'organization_name' => 'setOrganizationName',
        'phone_number' => 'setPhoneNumber',
        'mobile_phone_number' => 'setMobilePhoneNumber',
        'fax_number' => 'setFaxNumber',
        'email_address' => 'setEmailAddress',
        'website_url' => 'setWebsiteUrl',
        'owner_user_id' => 'setOwnerUserId',
        'date_created_utc' => 'setDateCreatedUtc',
        'date_updated_utc' => 'setDateUpdatedUtc',
        'converted' => 'setConverted',
        'converted_date_utc' => 'setConvertedDateUtc',
        'converted_contact_id' => 'setConvertedContactId',
        'converted_organization_id' => 'setConvertedOrganizationId',
        'converted_opportunity_id' => 'setConvertedOpportunityId',
        'visible_to' => 'setVisibleTo',
        'responsible_user_id' => 'setResponsibleUserId',
        'industry' => 'setIndustry',
        'lead_status_id' => 'setLeadStatusId',
        'lead_source_id' => 'setLeadSourceId',
        'visible_team_id' => 'setVisibleTeamId',
        'employee_count' => 'setEmployeeCount',
        'lead_rating' => 'setLeadRating',
        'lead_description' => 'setLeadDescription',
        'visible_user_ids' => 'setVisibleUserIds',
        'customfields' => 'setCustomfields',
        'address_street' => 'setAddressStreet',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_postcode' => 'setAddressPostcode',
        'address_country' => 'setAddressCountry',
        'tags' => 'setTags',
        'image_url' => 'setImageUrl'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'lead_id' => 'getLeadId',
        'salutation' => 'getSalutation',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'organization_name' => 'getOrganizationName',
        'phone_number' => 'getPhoneNumber',
        'mobile_phone_number' => 'getMobilePhoneNumber',
        'fax_number' => 'getFaxNumber',
        'email_address' => 'getEmailAddress',
        'website_url' => 'getWebsiteUrl',
        'owner_user_id' => 'getOwnerUserId',
        'date_created_utc' => 'getDateCreatedUtc',
        'date_updated_utc' => 'getDateUpdatedUtc',
        'converted' => 'getConverted',
        'converted_date_utc' => 'getConvertedDateUtc',
        'converted_contact_id' => 'getConvertedContactId',
        'converted_organization_id' => 'getConvertedOrganizationId',
        'converted_opportunity_id' => 'getConvertedOpportunityId',
        'visible_to' => 'getVisibleTo',
        'responsible_user_id' => 'getResponsibleUserId',
        'industry' => 'getIndustry',
        'lead_status_id' => 'getLeadStatusId',
        'lead_source_id' => 'getLeadSourceId',
        'visible_team_id' => 'getVisibleTeamId',
        'employee_count' => 'getEmployeeCount',
        'lead_rating' => 'getLeadRating',
        'lead_description' => 'getLeadDescription',
        'visible_user_ids' => 'getVisibleUserIds',
        'customfields' => 'getCustomfields',
        'address_street' => 'getAddressStreet',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_postcode' => 'getAddressPostcode',
        'address_country' => 'getAddressCountry',
        'tags' => 'getTags',
        'image_url' => 'getImageUrl'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['lead_id'] = isset($data['lead_id']) ? $data['lead_id'] : null;
        $this->container['salutation'] = isset($data['salutation']) ? $data['salutation'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['organization_name'] = isset($data['organization_name']) ? $data['organization_name'] : null;
        $this->container['phone_number'] = isset($data['phone_number']) ? $data['phone_number'] : null;
        $this->container['mobile_phone_number'] = isset($data['mobile_phone_number']) ? $data['mobile_phone_number'] : null;
        $this->container['fax_number'] = isset($data['fax_number']) ? $data['fax_number'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['date_created_utc'] = isset($data['date_created_utc']) ? $data['date_created_utc'] : null;
        $this->container['date_updated_utc'] = isset($data['date_updated_utc']) ? $data['date_updated_utc'] : null;
        $this->container['converted'] = isset($data['converted']) ? $data['converted'] : null;
        $this->container['converted_date_utc'] = isset($data['converted_date_utc']) ? $data['converted_date_utc'] : null;
        $this->container['converted_contact_id'] = isset($data['converted_contact_id']) ? $data['converted_contact_id'] : null;
        $this->container['converted_organization_id'] = isset($data['converted_organization_id']) ? $data['converted_organization_id'] : null;
        $this->container['converted_opportunity_id'] = isset($data['converted_opportunity_id']) ? $data['converted_opportunity_id'] : null;
        $this->container['visible_to'] = isset($data['visible_to']) ? $data['visible_to'] : null;
        $this->container['responsible_user_id'] = isset($data['responsible_user_id']) ? $data['responsible_user_id'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['lead_status_id'] = isset($data['lead_status_id']) ? $data['lead_status_id'] : null;
        $this->container['lead_source_id'] = isset($data['lead_source_id']) ? $data['lead_source_id'] : null;
        $this->container['visible_team_id'] = isset($data['visible_team_id']) ? $data['visible_team_id'] : null;
        $this->container['employee_count'] = isset($data['employee_count']) ? $data['employee_count'] : null;
        $this->container['lead_rating'] = isset($data['lead_rating']) ? $data['lead_rating'] : null;
        $this->container['lead_description'] = isset($data['lead_description']) ? $data['lead_description'] : null;
        $this->container['visible_user_ids'] = isset($data['visible_user_ids']) ? $data['visible_user_ids'] : null;
        $this->container['customfields'] = isset($data['customfields']) ? $data['customfields'] : null;
        $this->container['address_street'] = isset($data['address_street']) ? $data['address_street'] : null;
        $this->container['address_city'] = isset($data['address_city']) ? $data['address_city'] : null;
        $this->container['address_state'] = isset($data['address_state']) ? $data['address_state'] : null;
        $this->container['address_postcode'] = isset($data['address_postcode']) ? $data['address_postcode'] : null;
        $this->container['address_country'] = isset($data['address_country']) ? $data['address_country'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) > 50)) {
            $invalid_properties[] = "invalid value for 'salutation', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['salutation']) && (strlen($this->container['salutation']) < 0)) {
            $invalid_properties[] = "invalid value for 'salutation', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['title']) && (strlen($this->container['title']) > 255)) {
            $invalid_properties[] = "invalid value for 'title', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['title']) && (strlen($this->container['title']) < 0)) {
            $invalid_properties[] = "invalid value for 'title', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) > 255)) {
            $invalid_properties[] = "invalid value for 'first_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['first_name']) && (strlen($this->container['first_name']) < 0)) {
            $invalid_properties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['last_name'] === null) {
            $invalid_properties[] = "'last_name' can't be null";
        }
        if ((strlen($this->container['last_name']) > 255)) {
            $invalid_properties[] = "invalid value for 'last_name', the character length must be smaller than or equal to 255.";
        }

        if ((strlen($this->container['last_name']) < 0)) {
            $invalid_properties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['organization_name']) && (strlen($this->container['organization_name']) > 255)) {
            $invalid_properties[] = "invalid value for 'organization_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['organization_name']) && (strlen($this->container['organization_name']) < 0)) {
            $invalid_properties[] = "invalid value for 'organization_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone_number']) && (strlen($this->container['phone_number']) > 255)) {
            $invalid_properties[] = "invalid value for 'phone_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone_number']) && (strlen($this->container['phone_number']) < 0)) {
            $invalid_properties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (strlen($this->container['mobile_phone_number']) > 255)) {
            $invalid_properties[] = "invalid value for 'mobile_phone_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['mobile_phone_number']) && (strlen($this->container['mobile_phone_number']) < 0)) {
            $invalid_properties[] = "invalid value for 'mobile_phone_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) > 255)) {
            $invalid_properties[] = "invalid value for 'fax_number', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['fax_number']) && (strlen($this->container['fax_number']) < 0)) {
            $invalid_properties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['email_address']) && (strlen($this->container['email_address']) > 255)) {
            $invalid_properties[] = "invalid value for 'email_address', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email_address']) && (strlen($this->container['email_address']) < 0)) {
            $invalid_properties[] = "invalid value for 'email_address', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['website_url']) && (strlen($this->container['website_url']) > 255)) {
            $invalid_properties[] = "invalid value for 'website_url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website_url']) && (strlen($this->container['website_url']) < 0)) {
            $invalid_properties[] = "invalid value for 'website_url', the character length must be bigger than or equal to 0.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        if (strlen($this->container['salutation']) > 50) {
            return false;
        }
        if (strlen($this->container['salutation']) < 0) {
            return false;
        }
        if (strlen($this->container['title']) > 255) {
            return false;
        }
        if (strlen($this->container['title']) < 0) {
            return false;
        }
        if (strlen($this->container['first_name']) > 255) {
            return false;
        }
        if (strlen($this->container['first_name']) < 0) {
            return false;
        }
        if ($this->container['last_name'] === null) {
            return false;
        }
        if (strlen($this->container['last_name']) > 255) {
            return false;
        }
        if (strlen($this->container['last_name']) < 0) {
            return false;
        }
        if (strlen($this->container['organization_name']) > 255) {
            return false;
        }
        if (strlen($this->container['organization_name']) < 0) {
            return false;
        }
        if (strlen($this->container['phone_number']) > 255) {
            return false;
        }
        if (strlen($this->container['phone_number']) < 0) {
            return false;
        }
        if (strlen($this->container['mobile_phone_number']) > 255) {
            return false;
        }
        if (strlen($this->container['mobile_phone_number']) < 0) {
            return false;
        }
        if (strlen($this->container['fax_number']) > 255) {
            return false;
        }
        if (strlen($this->container['fax_number']) < 0) {
            return false;
        }
        if (strlen($this->container['email_address']) > 255) {
            return false;
        }
        if (strlen($this->container['email_address']) < 0) {
            return false;
        }
        if (strlen($this->container['website_url']) > 255) {
            return false;
        }
        if (strlen($this->container['website_url']) < 0) {
            return false;
        }
        return true;
    }


    /**
     * Gets lead_id
     * @return int
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     * @param int $lead_id Unique ID for the Lead record
     * @return $this
     */
    public function setLeadId($lead_id)
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets salutation
     * @return string
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     * @param string $salutation Salutation
     * @return $this
     */
    public function setSalutation($salutation)
    {
        if (strlen($salutation) > 50) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling Lead., must be smaller than or equal to 50.');
        }
        if (strlen($salutation) < 0) {
            throw new \InvalidArgumentException('invalid length for $salutation when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title Salutation
     * @return $this
     */
    public function setTitle($title)
    {
        if (strlen($title) > 255) {
            throw new \InvalidArgumentException('invalid length for $title when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($title) < 0) {
            throw new \InvalidArgumentException('invalid length for $title when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     * @param string $first_name First/Given Name
     * @return $this
     */
    public function setFirstName($first_name)
    {
        if (strlen($first_name) > 255) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($first_name) < 0) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     * @param string $last_name Last/Family/Surname of the Lead
     * @return $this
     */
    public function setLastName($last_name)
    {
        if (strlen($last_name) > 255) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($last_name) < 0) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets organization_name
     * @return string
     */
    public function getOrganizationName()
    {
        return $this->container['organization_name'];
    }

    /**
     * Sets organization_name
     * @param string $organization_name Organisation Name
     * @return $this
     */
    public function setOrganizationName($organization_name)
    {
        if (strlen($organization_name) > 255) {
            throw new \InvalidArgumentException('invalid length for $organization_name when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($organization_name) < 0) {
            throw new \InvalidArgumentException('invalid length for $organization_name when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['organization_name'] = $organization_name;

        return $this;
    }

    /**
     * Gets phone_number
     * @return string
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     * @param string $phone_number Phone Number
     * @return $this
     */
    public function setPhoneNumber($phone_number)
    {
        if (strlen($phone_number) > 255) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($phone_number) < 0) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets mobile_phone_number
     * @return string
     */
    public function getMobilePhoneNumber()
    {
        return $this->container['mobile_phone_number'];
    }

    /**
     * Sets mobile_phone_number
     * @param string $mobile_phone_number Mobile Phone Number
     * @return $this
     */
    public function setMobilePhoneNumber($mobile_phone_number)
    {
        if (strlen($mobile_phone_number) > 255) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($mobile_phone_number) < 0) {
            throw new \InvalidArgumentException('invalid length for $mobile_phone_number when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['mobile_phone_number'] = $mobile_phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     * @return string
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     * @param string $fax_number Fax Number
     * @return $this
     */
    public function setFaxNumber($fax_number)
    {
        if (strlen($fax_number) > 255) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($fax_number) < 0) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets email_address
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     * @param string $email_address Email Address
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        if (strlen($email_address) > 255) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($email_address) < 0) {
            throw new \InvalidArgumentException('invalid length for $email_address when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets website_url
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     * @param string $website_url Website URL Address
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        if (strlen($website_url) > 255) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling Lead., must be smaller than or equal to 255.');
        }
        if (strlen($website_url) < 0) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling Lead., must be bigger than or equal to 0.');
        }
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets owner_user_id
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     * @param int $owner_user_id User ID of the Lead owner
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets date_created_utc
     * @return \DateTime
     */
    public function getDateCreatedUtc()
    {
        return $this->container['date_created_utc'];
    }

    /**
     * Sets date_created_utc
     * @param \DateTime $date_created_utc Date and time Lead record creates, as Coordinated Universal Time (read only, automatically generated by server)
     * @return $this
     */
    public function setDateCreatedUtc($date_created_utc)
    {
        $this->container['date_created_utc'] = $date_created_utc;

        return $this;
    }

    /**
     * Gets date_updated_utc
     * @return \DateTime
     */
    public function getDateUpdatedUtc()
    {
        return $this->container['date_updated_utc'];
    }

    /**
     * Sets date_updated_utc
     * @param \DateTime $date_updated_utc Date and time Lead record updated, as Coordinated Universal Time (read only, automatically generated by server)
     * @return $this
     */
    public function setDateUpdatedUtc($date_updated_utc)
    {
        $this->container['date_updated_utc'] = $date_updated_utc;

        return $this;
    }

    /**
     * Gets converted
     * @return bool
     */
    public function getConverted()
    {
        return $this->container['converted'];
    }

    /**
     * Sets converted
     * @param bool $converted IsConverted Lead
     * @return $this
     */
    public function setConverted($converted)
    {
        $this->container['converted'] = $converted;

        return $this;
    }

    /**
     * Gets converted_date_utc
     * @return \DateTime
     */
    public function getConvertedDateUtc()
    {
        return $this->container['converted_date_utc'];
    }

    /**
     * Sets converted_date_utc
     * @param \DateTime $converted_date_utc Date and time Lead record converted to opportunity, as Coordinated Universal Time (read only, automatically generated by server)
     * @return $this
     */
    public function setConvertedDateUtc($converted_date_utc)
    {
        $this->container['converted_date_utc'] = $converted_date_utc;

        return $this;
    }

    /**
     * Gets converted_contact_id
     * @return int
     */
    public function getConvertedContactId()
    {
        return $this->container['converted_contact_id'];
    }

    /**
     * Sets converted_contact_id
     * @param int $converted_contact_id The Contact ID resulted from a Lead conversion process to Opportunity
     * @return $this
     */
    public function setConvertedContactId($converted_contact_id)
    {
        $this->container['converted_contact_id'] = $converted_contact_id;

        return $this;
    }

    /**
     * Gets converted_organization_id
     * @return int
     */
    public function getConvertedOrganizationId()
    {
        return $this->container['converted_organization_id'];
    }

    /**
     * Sets converted_organization_id
     * @param int $converted_organization_id The Opportunity ID resulted from a Lead conversion process
     * @return $this
     */
    public function setConvertedOrganizationId($converted_organization_id)
    {
        $this->container['converted_organization_id'] = $converted_organization_id;

        return $this;
    }

    /**
     * Gets converted_opportunity_id
     * @return int
     */
    public function getConvertedOpportunityId()
    {
        return $this->container['converted_opportunity_id'];
    }

    /**
     * Sets converted_opportunity_id
     * @param int $converted_opportunity_id The Opportunity ID resulted from a Lead conversion process
     * @return $this
     */
    public function setConvertedOpportunityId($converted_opportunity_id)
    {
        $this->container['converted_opportunity_id'] = $converted_opportunity_id;

        return $this;
    }

    /**
     * Gets visible_to
     * @return string
     */
    public function getVisibleTo()
    {
        return $this->container['visible_to'];
    }

    /**
     * Sets visible_to
     * @param string $visible_to This field can have one of the following values: 'Everyone' (Default), 'Owner', 'Team', or 'Individuals'.\"
     * @return $this
     */
    public function setVisibleTo($visible_to)
    {
        $this->container['visible_to'] = $visible_to;

        return $this;
    }

    /**
     * Gets responsible_user_id
     * @return int
     */
    public function getResponsibleUserId()
    {
        return $this->container['responsible_user_id'];
    }

    /**
     * Sets responsible_user_id
     * @param int $responsible_user_id Responsible User's ID.
     * @return $this
     */
    public function setResponsibleUserId($responsible_user_id)
    {
        $this->container['responsible_user_id'] = $responsible_user_id;

        return $this;
    }

    /**
     * Gets industry
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     * @param string $industry The associated Industry
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets lead_status_id
     * @return int
     */
    public function getLeadStatusId()
    {
        return $this->container['lead_status_id'];
    }

    /**
     * Sets lead_status_id
     * @param int $lead_status_id Lead Statuses which will be having a value pair of (status and status type) i.e. (Contacted, OPEN) or (Converted, CLOSED)
     * @return $this
     */
    public function setLeadStatusId($lead_status_id)
    {
        $this->container['lead_status_id'] = $lead_status_id;

        return $this;
    }

    /**
     * Gets lead_source_id
     * @return int
     */
    public function getLeadSourceId()
    {
        return $this->container['lead_source_id'];
    }

    /**
     * Sets lead_source_id
     * @param int $lead_source_id Lead Source i.e. web, phone etc
     * @return $this
     */
    public function setLeadSourceId($lead_source_id)
    {
        $this->container['lead_source_id'] = $lead_source_id;

        return $this;
    }

    /**
     * Gets visible_team_id
     * @return int
     */
    public function getVisibleTeamId()
    {
        return $this->container['visible_team_id'];
    }

    /**
     * Sets visible_team_id
     * @param int $visible_team_id If VISIBLE_TO is 'Team', then this should be a Team ID, which must be a valid TEAM_ID record locator.
     * @return $this
     */
    public function setVisibleTeamId($visible_team_id)
    {
        $this->container['visible_team_id'] = $visible_team_id;

        return $this;
    }

    /**
     * Gets employee_count
     * @return int
     */
    public function getEmployeeCount()
    {
        return $this->container['employee_count'];
    }

    /**
     * Sets employee_count
     * @param int $employee_count Employee count for the lead's organization
     * @return $this
     */
    public function setEmployeeCount($employee_count)
    {
        $this->container['employee_count'] = $employee_count;

        return $this;
    }

    /**
     * Gets lead_rating
     * @return int
     */
    public function getLeadRating()
    {
        return $this->container['lead_rating'];
    }

    /**
     * Sets lead_rating
     * @param int $lead_rating Lead's Rating
     * @return $this
     */
    public function setLeadRating($lead_rating)
    {
        $this->container['lead_rating'] = $lead_rating;

        return $this;
    }

    /**
     * Gets lead_description
     * @return string
     */
    public function getLeadDescription()
    {
        return $this->container['lead_description'];
    }

    /**
     * Sets lead_description
     * @param string $lead_description Lead's Description
     * @return $this
     */
    public function setLeadDescription($lead_description)
    {
        $this->container['lead_description'] = $lead_description;

        return $this;
    }

    /**
     * Gets visible_user_ids
     * @return string
     */
    public function getVisibleUserIds()
    {
        return $this->container['visible_user_ids'];
    }

    /**
     * Sets visible_user_ids
     * @param string $visible_user_ids If VISIBLE_TO is 'Individuals', then this should be a comma-separated list of User IDs. This field is always empty in the response. Upon successful POST or PUT an anonymous team is created from the list of IDs, and the response will contain a VISIBLE_TEAM_ID.
     * @return $this
     */
    public function setVisibleUserIds($visible_user_ids)
    {
        $this->container['visible_user_ids'] = $visible_user_ids;

        return $this;
    }

    /**
     * Gets customfields
     * @return \Swagger\Client\Model\APICustomField[]
     */
    public function getCustomfields()
    {
        return $this->container['customfields'];
    }

    /**
     * Sets customfields
     * @param \Swagger\Client\Model\APICustomField[] $customfields Set of custom fields attached to the Lead
     * @return $this
     */
    public function setCustomfields($customfields)
    {
        $this->container['customfields'] = $customfields;

        return $this;
    }

    /**
     * Gets address_street
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['address_street'];
    }

    /**
     * Sets address_street
     * @param string $address_street Set of addresses attached to the Lead
     * @return $this
     */
    public function setAddressStreet($address_street)
    {
        $this->container['address_street'] = $address_street;

        return $this;
    }

    /**
     * Gets address_city
     * @return string
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     * @param string $address_city Address street attached to the Lead
     * @return $this
     */
    public function setAddressCity($address_city)
    {
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_state
     * @return string
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     * @param string $address_state Address state attached to the Lead
     * @return $this
     */
    public function setAddressState($address_state)
    {
        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_postcode
     * @return string
     */
    public function getAddressPostcode()
    {
        return $this->container['address_postcode'];
    }

    /**
     * Sets address_postcode
     * @param string $address_postcode Address postal code attached to the Lead
     * @return $this
     */
    public function setAddressPostcode($address_postcode)
    {
        $this->container['address_postcode'] = $address_postcode;

        return $this;
    }

    /**
     * Gets address_country
     * @return string
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     * @param string $address_country Address country attached to the Lead
     * @return $this
     */
    public function setAddressCountry($address_country)
    {
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets tags
     * @return \Swagger\Client\Model\APITag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     * @param \Swagger\Client\Model\APITag[] $tags Set of tags attached to the Lead
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets image_url
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     * @param string $image_url Url of the Image for the Lead.  Use the 'leads/:id/image' endpoint to change the image.
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


