<?php
/**
 * APIPipeline
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * APIPipeline Class Doc Comment
 *
 * @category    Class */
 // @description APIPipeline
/** 
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class APIPipeline implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'APIPipeline';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'pipeline_id' => 'int',
        'pipeline_name' => 'string',
        'for_opportunities' => 'bool',
        'for_projects' => 'bool',
        'owner_user_id' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'pipeline_id' => 'PIPELINE_ID',
        'pipeline_name' => 'PIPELINE_NAME',
        'for_opportunities' => 'FOR_OPPORTUNITIES',
        'for_projects' => 'FOR_PROJECTS',
        'owner_user_id' => 'OWNER_USER_ID'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'pipeline_id' => 'setPipelineId',
        'pipeline_name' => 'setPipelineName',
        'for_opportunities' => 'setForOpportunities',
        'for_projects' => 'setForProjects',
        'owner_user_id' => 'setOwnerUserId'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'pipeline_id' => 'getPipelineId',
        'pipeline_name' => 'getPipelineName',
        'for_opportunities' => 'getForOpportunities',
        'for_projects' => 'getForProjects',
        'owner_user_id' => 'getOwnerUserId'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pipeline_id'] = isset($data['pipeline_id']) ? $data['pipeline_id'] : null;
        $this->container['pipeline_name'] = isset($data['pipeline_name']) ? $data['pipeline_name'] : null;
        $this->container['for_opportunities'] = isset($data['for_opportunities']) ? $data['for_opportunities'] : null;
        $this->container['for_projects'] = isset($data['for_projects']) ? $data['for_projects'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets pipeline_id
     * @return int
     */
    public function getPipelineId()
    {
        return $this->container['pipeline_id'];
    }

    /**
     * Sets pipeline_id
     * @param int $pipeline_id Unique ID for the Pipeline record.
     * @return $this
     */
    public function setPipelineId($pipeline_id)
    {
        $this->container['pipeline_id'] = $pipeline_id;

        return $this;
    }

    /**
     * Gets pipeline_name
     * @return string
     */
    public function getPipelineName()
    {
        return $this->container['pipeline_name'];
    }

    /**
     * Sets pipeline_name
     * @param string $pipeline_name Name of the Pipeline.
     * @return $this
     */
    public function setPipelineName($pipeline_name)
    {
        $this->container['pipeline_name'] = $pipeline_name;

        return $this;
    }

    /**
     * Gets for_opportunities
     * @return bool
     */
    public function getForOpportunities()
    {
        return $this->container['for_opportunities'];
    }

    /**
     * Sets for_opportunities
     * @param bool $for_opportunities True if the Pipeline is available for Opportunity records.
     * @return $this
     */
    public function setForOpportunities($for_opportunities)
    {
        $this->container['for_opportunities'] = $for_opportunities;

        return $this;
    }

    /**
     * Gets for_projects
     * @return bool
     */
    public function getForProjects()
    {
        return $this->container['for_projects'];
    }

    /**
     * Sets for_projects
     * @param bool $for_projects True if the Pipeline is available for Project records.
     * @return $this
     */
    public function setForProjects($for_projects)
    {
        $this->container['for_projects'] = $for_projects;

        return $this;
    }

    /**
     * Gets owner_user_id
     * @return int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     * @param int $owner_user_id User ID of the Pipeline record owner.
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


