<?php
/**
 * EmailsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * EmailsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.insight.ly/v2.2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return EmailsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addComment
     *
     * Adds a Comment to an email.
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param \Swagger\Client\Model\APIComment $api_comment The Comment to add (just include JSON object as request body) (required)
     * @return \Swagger\Client\Model\Comment
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addComment($id, $api_comment)
    {
        list($response) = $this->addCommentWithHttpInfo($id, $api_comment);
        return $response;
    }

    /**
     * Operation addCommentWithHttpInfo
     *
     * Adds a Comment to an email.
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param \Swagger\Client\Model\APIComment $api_comment The Comment to add (just include JSON object as request body) (required)
     * @return Array of \Swagger\Client\Model\Comment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addCommentWithHttpInfo($id, $api_comment)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addComment');
        }
        // verify the required parameter 'api_comment' is set
        if ($api_comment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_comment when calling addComment');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_comment)) {
            $_tempBody = $api_comment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Comment',
                '/Emails/{id}/Comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Comment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Comment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFollow
     *
     * Start following an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @return \Swagger\Client\Model\Follow
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addFollow($id)
    {
        list($response) = $this->addFollowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation addFollowWithHttpInfo
     *
     * Start following an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @return Array of \Swagger\Client\Model\Follow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addFollowWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addFollow');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Follow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Follow',
                '/Emails/{id}/Follow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Follow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Follow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addTag
     *
     * Adds a Tag for an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param \Swagger\Client\Model\APITag $api_tag The Tag to add (required)
     * @return \Swagger\Client\Model\Tag
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTag($id, $api_tag)
    {
        list($response) = $this->addTagWithHttpInfo($id, $api_tag);
        return $response;
    }

    /**
     * Operation addTagWithHttpInfo
     *
     * Adds a Tag for an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param \Swagger\Client\Model\APITag $api_tag The Tag to add (required)
     * @return Array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTagWithHttpInfo($id, $api_tag)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addTag');
        }
        // verify the required parameter 'api_tag' is set
        if ($api_tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_tag when calling addTag');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_tag)) {
            $_tempBody = $api_tag;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Emails/{id}/Tags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFollow
     *
     * Stop following an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteFollow($id)
    {
        list($response) = $this->deleteFollowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFollowWithHttpInfo
     *
     * Stop following an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteFollowWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFollow');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Follow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Emails/{id}/Follow'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTag
     *
     * Deletes a Tag from an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param string $tag_name A Tag&#39;s name (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTag($id, $tag_name)
    {
        list($response) = $this->deleteTagWithHttpInfo($id, $tag_name);
        return $response;
    }

    /**
     * Operation deleteTagWithHttpInfo
     *
     * Deletes a Tag from an Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param string $tag_name A Tag&#39;s name (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTagWithHttpInfo($id, $tag_name)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteTag');
        }
        // verify the required parameter 'tag_name' is set
        if ($tag_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_name when calling deleteTag');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Tags/{tagName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag_name !== null) {
            $resourcePath = str_replace(
                "{" . "tagName" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Emails/{id}/Tags/{tagName}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getComments
     *
     * Gets an Email's Comments
     *
     * @param int $id An Emails&#39;s ID (EMAIL_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when comment was last updated. (optional)
     * @param int $skip Optional, number of comments to skip. (optional)
     * @param int $top Optional, maximum number of comments to return in the response. (optional)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Comment[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getComments($id, $updated_after_utc = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getCommentsWithHttpInfo($id, $updated_after_utc, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getCommentsWithHttpInfo
     *
     * Gets an Email's Comments
     *
     * @param int $id An Emails&#39;s ID (EMAIL_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when comment was last updated. (optional)
     * @param int $skip Optional, number of comments to skip. (optional)
     * @param int $top Optional, maximum number of comments to return in the response. (optional)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Comment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getCommentsWithHttpInfo($id, $updated_after_utc = null, $skip = null, $top = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getComments');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Comments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Comment[]',
                '/Emails/{id}/Comments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Comment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Comment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmail
     *
     * Gets an Email
     *
     * @param int $id An Email&#39;s ID (required)
     * @return \Swagger\Client\Model\Email
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmail($id)
    {
        list($response) = $this->getEmailWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getEmailWithHttpInfo
     *
     * Gets an Email
     *
     * @param int $id An Email&#39;s ID (required)
     * @return Array of \Swagger\Client\Model\Email, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEmail');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Email',
                '/Emails/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Email', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Email', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmails
     *
     * Gets a list of Emails.
     *
     * @param bool $brief Optional, true if response should only contain top level properties of the email. (optional, default to false)
     * @param int $skip Optional, number of emails to skip. (optional)
     * @param int $top Optional, maximum number of emails to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Email[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmails($brief = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getEmailsWithHttpInfo($brief, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getEmailsWithHttpInfo
     *
     * Gets a list of Emails.
     *
     * @param bool $brief Optional, true if response should only contain top level properties of the email. (optional, default to false)
     * @param int $skip Optional, number of emails to skip. (optional)
     * @param int $top Optional, maximum number of emails to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Email[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailsWithHttpInfo($brief = null, $skip = null, $top = null, $count_total = null)
    {
        // parse inputs
        $resourcePath = "/Emails";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Email[]',
                '/Emails'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Email[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Email[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEmailsBySearch
     *
     * Gets a filtered list of Emails.
     *
     * @param string $email_from Optional, from email address. (optional)
     * @param string $email_to Optional, to email address. (optional)
     * @param string $tag Optional, a single tag. (optional)
     * @param \DateTime $updated_after_utc Optional, earliest date when email was last updated. (optional)
     * @param bool $brief Optional, true if response should only contain top level properties of the email. (optional, default to false)
     * @param int $skip Optional, number of emails to skip. (optional)
     * @param int $top Optional, maximum number of emails to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Email[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailsBySearch($email_from = null, $email_to = null, $tag = null, $updated_after_utc = null, $brief = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getEmailsBySearchWithHttpInfo($email_from, $email_to, $tag, $updated_after_utc, $brief, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getEmailsBySearchWithHttpInfo
     *
     * Gets a filtered list of Emails.
     *
     * @param string $email_from Optional, from email address. (optional)
     * @param string $email_to Optional, to email address. (optional)
     * @param string $tag Optional, a single tag. (optional)
     * @param \DateTime $updated_after_utc Optional, earliest date when email was last updated. (optional)
     * @param bool $brief Optional, true if response should only contain top level properties of the email. (optional, default to false)
     * @param int $skip Optional, number of emails to skip. (optional)
     * @param int $top Optional, maximum number of emails to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Email[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailsBySearchWithHttpInfo($email_from = null, $email_to = null, $tag = null, $updated_after_utc = null, $brief = null, $skip = null, $top = null, $count_total = null)
    {
        // parse inputs
        $resourcePath = "/Emails/Search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($email_from !== null) {
            $queryParams['email_from'] = $this->apiClient->getSerializer()->toQueryValue($email_from);
        }
        // query params
        if ($email_to !== null) {
            $queryParams['email_to'] = $this->apiClient->getSerializer()->toQueryValue($email_to);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = $this->apiClient->getSerializer()->toQueryValue($tag);
        }
        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Email[]',
                '/Emails/Search'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Email[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Email[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFileAttachments
     *
     * Gets an Email's File Attachments
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when file attachment was last updated. (optional)
     * @param int $skip Optional, number of file attachments to skip. (optional)
     * @param int $top Optional, maximum number of file attachments to return in the response. (optional)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\FileAttachment[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFileAttachments($id, $updated_after_utc = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getFileAttachmentsWithHttpInfo($id, $updated_after_utc, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getFileAttachmentsWithHttpInfo
     *
     * Gets an Email's File Attachments
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when file attachment was last updated. (optional)
     * @param int $skip Optional, number of file attachments to skip. (optional)
     * @param int $top Optional, maximum number of file attachments to return in the response. (optional)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\FileAttachment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFileAttachmentsWithHttpInfo($id, $updated_after_utc = null, $skip = null, $top = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFileAttachments');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/FileAttachments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FileAttachment[]',
                '/Emails/{id}/FileAttachments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FileAttachment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FileAttachment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFollow
     *
     * Gets a Follow record for the Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @return \Swagger\Client\Model\Follow
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFollow($id)
    {
        list($response) = $this->getFollowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFollowWithHttpInfo
     *
     * Gets a Follow record for the Email
     *
     * @param int $id An Email&#39;s ID (EMAIL_ID) (required)
     * @return Array of \Swagger\Client\Model\Follow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFollowWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFollow');
        }
        // parse inputs
        $resourcePath = "/Emails/{id}/Follow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Follow',
                '/Emails/{id}/Follow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Follow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Follow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
