<?php
/**
 * LeadsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Insightly API v2.2
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\Configuration;
use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\ObjectSerializer;

/**
 * LeadsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApi
{

    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://api.insight.ly/v2.2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return LeadsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation addActivitySetAssignment
     *
     * Adds an Activity Set to a Lead
     *
     * @param int $id A Lead&#39;s ID (required)
     * @param \Swagger\Client\Model\APIActivitySetAssignment $api_activity_set_assignment The Activity Set Assignment object which contains the configuration information for the Activity Set (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addActivitySetAssignment($id, $api_activity_set_assignment)
    {
        list($response) = $this->addActivitySetAssignmentWithHttpInfo($id, $api_activity_set_assignment);
        return $response;
    }

    /**
     * Operation addActivitySetAssignmentWithHttpInfo
     *
     * Adds an Activity Set to a Lead
     *
     * @param int $id A Lead&#39;s ID (required)
     * @param \Swagger\Client\Model\APIActivitySetAssignment $api_activity_set_assignment The Activity Set Assignment object which contains the configuration information for the Activity Set (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addActivitySetAssignmentWithHttpInfo($id, $api_activity_set_assignment)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addActivitySetAssignment');
        }
        // verify the required parameter 'api_activity_set_assignment' is set
        if ($api_activity_set_assignment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_activity_set_assignment when calling addActivitySetAssignment');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/ActivitySetAssignment";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_activity_set_assignment)) {
            $_tempBody = $api_activity_set_assignment;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}/ActivitySetAssignment'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation addFileAttachment
     *
     * Adds a File Attachment to a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \SplFileObject $file The file part of the multipart/form-data request. Only one file can be added per request. (required)
     * @param string $file_name The name and extension of the File Attachment (optional)
     * @param string $content_type The MIME type of the File Attachment (optional)
     * @param int $file_category_id The category of the File Attachment, if it has been assigned to one (optional)
     * @return \Swagger\Client\Model\FileAttachment
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addFileAttachment($id, $file, $file_name = null, $content_type = null, $file_category_id = null)
    {
        list($response) = $this->addFileAttachmentWithHttpInfo($id, $file, $file_name, $content_type, $file_category_id);
        return $response;
    }

    /**
     * Operation addFileAttachmentWithHttpInfo
     *
     * Adds a File Attachment to a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \SplFileObject $file The file part of the multipart/form-data request. Only one file can be added per request. (required)
     * @param string $file_name The name and extension of the File Attachment (optional)
     * @param string $content_type The MIME type of the File Attachment (optional)
     * @param int $file_category_id The category of the File Attachment, if it has been assigned to one (optional)
     * @return Array of \Swagger\Client\Model\FileAttachment, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addFileAttachmentWithHttpInfo($id, $file, $file_name = null, $content_type = null, $file_category_id = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addFileAttachment');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling addFileAttachment');
        }
        if (!is_null($file_name) && (strlen($file_name) > 500)) {
            throw new \InvalidArgumentException('invalid length for "$file_name" when calling LeadsApi.addFileAttachment, must be smaller than or equal to 500.');
        }

        if (!is_null($content_type) && (strlen($content_type) > 255)) {
            throw new \InvalidArgumentException('invalid length for "$content_type" when calling LeadsApi.addFileAttachment, must be smaller than or equal to 255.');
        }

        // parse inputs
        $resourcePath = "/Leads/{id}/FileAttachments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('multipart/form-data'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        // form params
        if ($file_name !== null) {
            $formParams['file_name'] = $this->apiClient->getSerializer()->toFormValue($file_name);
        }
        // form params
        if ($content_type !== null) {
            $formParams['content_type'] = $this->apiClient->getSerializer()->toFormValue($content_type);
        }
        // form params
        if ($file_category_id !== null) {
            $formParams['file_category_id'] = $this->apiClient->getSerializer()->toFormValue($file_category_id);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FileAttachment',
                '/Leads/{id}/FileAttachments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FileAttachment', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FileAttachment', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFollow
     *
     * Start following a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return \Swagger\Client\Model\Follow
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addFollow($id)
    {
        list($response) = $this->addFollowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation addFollowWithHttpInfo
     *
     * Start following a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return Array of \Swagger\Client\Model\Follow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addFollowWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addFollow');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Follow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Follow',
                '/Leads/{id}/Follow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Follow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Follow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addLead
     *
     * Adds a Lead
     *
     * @param \Swagger\Client\Model\APILead $api_lead The Lead to add (just include JSON object as request body) (required)
     * @return \Swagger\Client\Model\Lead
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addLead($api_lead)
    {
        list($response) = $this->addLeadWithHttpInfo($api_lead);
        return $response;
    }

    /**
     * Operation addLeadWithHttpInfo
     *
     * Adds a Lead
     *
     * @param \Swagger\Client\Model\APILead $api_lead The Lead to add (just include JSON object as request body) (required)
     * @return Array of \Swagger\Client\Model\Lead, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addLeadWithHttpInfo($api_lead)
    {
        // verify the required parameter 'api_lead' is set
        if ($api_lead === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_lead when calling addLead');
        }
        // parse inputs
        $resourcePath = "/Leads";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_lead)) {
            $_tempBody = $api_lead;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Lead',
                '/Leads'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Lead', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Lead', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addNote
     *
     * Adds a Note to a Lead.
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \Swagger\Client\Model\APINote $api_note The Note to add (just include JSON object as request body) (required)
     * @return \Swagger\Client\Model\Note
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNote($id, $api_note)
    {
        list($response) = $this->addNoteWithHttpInfo($id, $api_note);
        return $response;
    }

    /**
     * Operation addNoteWithHttpInfo
     *
     * Adds a Note to a Lead.
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \Swagger\Client\Model\APINote $api_note The Note to add (just include JSON object as request body) (required)
     * @return Array of \Swagger\Client\Model\Note, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addNoteWithHttpInfo($id, $api_note)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addNote');
        }
        // verify the required parameter 'api_note' is set
        if ($api_note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_note when calling addNote');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_note)) {
            $_tempBody = $api_note;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Note',
                '/Leads/{id}/Notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Note', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Note', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addTag
     *
     * Adds a Tag for a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \Swagger\Client\Model\APITag $api_tag The Tag to add (just include the JSON object in request body. (required)
     * @return \Swagger\Client\Model\Tag
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTag($id, $api_tag)
    {
        list($response) = $this->addTagWithHttpInfo($id, $api_tag);
        return $response;
    }

    /**
     * Operation addTagWithHttpInfo
     *
     * Adds a Tag for a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \Swagger\Client\Model\APITag $api_tag The Tag to add (just include the JSON object in request body. (required)
     * @return Array of \Swagger\Client\Model\Tag, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function addTagWithHttpInfo($id, $api_tag)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling addTag');
        }
        // verify the required parameter 'api_tag' is set
        if ($api_tag === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_tag when calling addTag');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Tags";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_tag)) {
            $_tempBody = $api_tag;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Tag',
                '/Leads/{id}/Tags'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Tag', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Tag', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteCustomField
     *
     * Deletes a Custom Field
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param string $custom_field_id A Custom Field&#39;s ID (CUSTOM_FIELD_ID) (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteCustomField($id, $custom_field_id)
    {
        list($response) = $this->deleteCustomFieldWithHttpInfo($id, $custom_field_id);
        return $response;
    }

    /**
     * Operation deleteCustomFieldWithHttpInfo
     *
     * Deletes a Custom Field
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param string $custom_field_id A Custom Field&#39;s ID (CUSTOM_FIELD_ID) (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteCustomFieldWithHttpInfo($id, $custom_field_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteCustomField');
        }
        // verify the required parameter 'custom_field_id' is set
        if ($custom_field_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $custom_field_id when calling deleteCustomField');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/CustomFields/{customFieldId}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($custom_field_id !== null) {
            $resourcePath = str_replace(
                "{" . "customFieldId" . "}",
                $this->apiClient->getSerializer()->toPathValue($custom_field_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}/CustomFields/{customFieldId}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteFollow
     *
     * Stop following a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteFollow($id)
    {
        list($response) = $this->deleteFollowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteFollowWithHttpInfo
     *
     * Stop following a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteFollowWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteFollow');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Follow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}/Follow'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteImage
     *
     * Deletes a Lead's Image
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteImage($id)
    {
        list($response) = $this->deleteImageWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteImageWithHttpInfo
     *
     * Deletes a Lead's Image
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteImageWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteImage');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}/Image'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteLead
     *
     * Deletes a Lead
     *
     * @param int $id A Lead&#39;s ID (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteLead($id)
    {
        list($response) = $this->deleteLeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation deleteLeadWithHttpInfo
     *
     * Deletes a Lead
     *
     * @param int $id A Lead&#39;s ID (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteLeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteLead');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteTag
     *
     * Deletes a Tag from a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param string $tag_name A Tag&#39;s name (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTag($id, $tag_name)
    {
        list($response) = $this->deleteTagWithHttpInfo($id, $tag_name);
        return $response;
    }

    /**
     * Operation deleteTagWithHttpInfo
     *
     * Deletes a Tag from a Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param string $tag_name A Tag&#39;s name (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function deleteTagWithHttpInfo($id, $tag_name)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling deleteTag');
        }
        // verify the required parameter 'tag_name' is set
        if ($tag_name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $tag_name when calling deleteTag');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Tags/{tagName}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($tag_name !== null) {
            $resourcePath = str_replace(
                "{" . "tagName" . "}",
                $this->apiClient->getSerializer()->toPathValue($tag_name),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}/Tags/{tagName}'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getEmails
     *
     * Gets a list of Lead's Emails
     *
     * @param int $id A Lead&#39;s ID (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when email was last updated. (optional)
     * @param int $top Optional, maximum number of emails to return. (optional)
     * @param int $skip Optional, number of emails to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Email[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmails($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        list($response) = $this->getEmailsWithHttpInfo($id, $updated_after_utc, $top, $skip, $brief, $count_total);
        return $response;
    }

    /**
     * Operation getEmailsWithHttpInfo
     *
     * Gets a list of Lead's Emails
     *
     * @param int $id A Lead&#39;s ID (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when email was last updated. (optional)
     * @param int $top Optional, maximum number of emails to return. (optional)
     * @param int $skip Optional, number of emails to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Email[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEmailsWithHttpInfo($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEmails');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Emails";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Email[]',
                '/Leads/{id}/Emails'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Email[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Email[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getEvents
     *
     * Gets a Lead's Events
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when event was last updated. (optional)
     * @param int $top Optional, maximum number of events to return. (optional)
     * @param int $skip Optional, number of events to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\CalendarEvent[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEvents($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        list($response) = $this->getEventsWithHttpInfo($id, $updated_after_utc, $top, $skip, $brief, $count_total);
        return $response;
    }

    /**
     * Operation getEventsWithHttpInfo
     *
     * Gets a Lead's Events
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when event was last updated. (optional)
     * @param int $top Optional, maximum number of events to return. (optional)
     * @param int $skip Optional, number of events to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\CalendarEvent[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getEventsWithHttpInfo($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getEvents');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Events";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CalendarEvent[]',
                '/Leads/{id}/Events'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CalendarEvent[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CalendarEvent[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFileAttachments
     *
     * Gets a Lead's File Attachments
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when file attachment was last updated. (optional)
     * @param int $skip Optional, number of file attachments to skip. (optional)
     * @param int $top Optional, maximum number of file attachments to return in the response. (optional)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\FileAttachment[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFileAttachments($id, $updated_after_utc = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getFileAttachmentsWithHttpInfo($id, $updated_after_utc, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getFileAttachmentsWithHttpInfo
     *
     * Gets a Lead's File Attachments
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when file attachment was last updated. (optional)
     * @param int $skip Optional, number of file attachments to skip. (optional)
     * @param int $top Optional, maximum number of file attachments to return in the response. (optional)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\FileAttachment[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFileAttachmentsWithHttpInfo($id, $updated_after_utc = null, $skip = null, $top = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFileAttachments');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/FileAttachments";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\FileAttachment[]',
                '/Leads/{id}/FileAttachments'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\FileAttachment[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\FileAttachment[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getFollow
     *
     * Gets a Follow record for the Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return \Swagger\Client\Model\Follow
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFollow($id)
    {
        list($response) = $this->getFollowWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getFollowWithHttpInfo
     *
     * Gets a Follow record for the Lead
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return Array of \Swagger\Client\Model\Follow, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getFollowWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getFollow');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Follow";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Follow',
                '/Leads/{id}/Follow'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Follow', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Follow', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getImage
     *
     * Gets a Lead's Image
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return void
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getImage($id)
    {
        list($response) = $this->getImageWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getImageWithHttpInfo
     *
     * Gets a Lead's Image
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @return Array of null, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getImageWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getImage');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Image";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/octet-stream'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/Leads/{id}/Image'
            );

            return array(null, $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getLead
     *
     * Gets a Lead
     *
     * @param int $id A Lead&#39;s ID (required)
     * @return \Swagger\Client\Model\Lead
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLead($id)
    {
        list($response) = $this->getLeadWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getLeadWithHttpInfo
     *
     * Gets a Lead
     *
     * @param int $id A Lead&#39;s ID (required)
     * @return Array of \Swagger\Client\Model\Lead, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLeadWithHttpInfo($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getLead');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Lead',
                '/Leads/{id}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Lead', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Lead', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLeads
     *
     * Gets a list of Leads.
     *
     * @param bool $include_converted Optional, by default converted leads are not included, pass in \&quot;true\&quot; to include them in the response (optional, default to false)
     * @param bool $brief Optional, true if response should only contain top level properties of the lead. (optional, default to false)
     * @param int $skip Optional, number of lead to skip. (optional)
     * @param int $top Optional, maximum number of lead to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Lead[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLeads($include_converted = null, $brief = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getLeadsWithHttpInfo($include_converted, $brief, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getLeadsWithHttpInfo
     *
     * Gets a list of Leads.
     *
     * @param bool $include_converted Optional, by default converted leads are not included, pass in \&quot;true\&quot; to include them in the response (optional, default to false)
     * @param bool $brief Optional, true if response should only contain top level properties of the lead. (optional, default to false)
     * @param int $skip Optional, number of lead to skip. (optional)
     * @param int $top Optional, maximum number of lead to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Lead[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLeadsWithHttpInfo($include_converted = null, $brief = null, $skip = null, $top = null, $count_total = null)
    {
        // parse inputs
        $resourcePath = "/Leads";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($include_converted !== null) {
            $queryParams['include_converted'] = $this->apiClient->getSerializer()->toQueryValue($include_converted);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Lead[]',
                '/Leads'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Lead[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Lead[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getLeadsBySearch
     *
     * Gets a filtered list of Leads.
     *
     * @param string $email Optional, email address. (optional)
     * @param string $tag Optional, a single tag. (optional)
     * @param string $phone_number Optional, phone number. (optional)
     * @param string $first_name Optional, first name of the contact. (optional)
     * @param string $last_name Optional, last name of the contact. (optional)
     * @param string $city Optional, name of the city from lead address. (optional)
     * @param string $state Optional, state from the lead address. (optional)
     * @param string $postcode Optional, postal code from the lead address. (optional)
     * @param string $country Optional, name of the country from lead address. (optional)
     * @param string $organisation Optional, name of the default organisation. (optional)
     * @param \DateTime $updated_after_utc Optional, earliest date when lead was last updated. (optional)
     * @param bool $include_converted Optional, by default converted leads are not included, pass in \&quot;true\&quot; to include them in the response (optional, default to false)
     * @param bool $brief Optional, true if response should only contain top level properties of the lead. (optional, default to false)
     * @param int $skip Optional, number of lead to skip. (optional)
     * @param int $top Optional, maximum number of lead to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Lead[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLeadsBySearch($email = null, $tag = null, $phone_number = null, $first_name = null, $last_name = null, $city = null, $state = null, $postcode = null, $country = null, $organisation = null, $updated_after_utc = null, $include_converted = null, $brief = null, $skip = null, $top = null, $count_total = null)
    {
        list($response) = $this->getLeadsBySearchWithHttpInfo($email, $tag, $phone_number, $first_name, $last_name, $city, $state, $postcode, $country, $organisation, $updated_after_utc, $include_converted, $brief, $skip, $top, $count_total);
        return $response;
    }

    /**
     * Operation getLeadsBySearchWithHttpInfo
     *
     * Gets a filtered list of Leads.
     *
     * @param string $email Optional, email address. (optional)
     * @param string $tag Optional, a single tag. (optional)
     * @param string $phone_number Optional, phone number. (optional)
     * @param string $first_name Optional, first name of the contact. (optional)
     * @param string $last_name Optional, last name of the contact. (optional)
     * @param string $city Optional, name of the city from lead address. (optional)
     * @param string $state Optional, state from the lead address. (optional)
     * @param string $postcode Optional, postal code from the lead address. (optional)
     * @param string $country Optional, name of the country from lead address. (optional)
     * @param string $organisation Optional, name of the default organisation. (optional)
     * @param \DateTime $updated_after_utc Optional, earliest date when lead was last updated. (optional)
     * @param bool $include_converted Optional, by default converted leads are not included, pass in \&quot;true\&quot; to include them in the response (optional, default to false)
     * @param bool $brief Optional, true if response should only contain top level properties of the lead. (optional, default to false)
     * @param int $skip Optional, number of lead to skip. (optional)
     * @param int $top Optional, maximum number of lead to return in the response. (optional)
     * @param bool $count_total Optional, true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Lead[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getLeadsBySearchWithHttpInfo($email = null, $tag = null, $phone_number = null, $first_name = null, $last_name = null, $city = null, $state = null, $postcode = null, $country = null, $organisation = null, $updated_after_utc = null, $include_converted = null, $brief = null, $skip = null, $top = null, $count_total = null)
    {
        // parse inputs
        $resourcePath = "/Leads/Search";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($email !== null) {
            $queryParams['email'] = $this->apiClient->getSerializer()->toQueryValue($email);
        }
        // query params
        if ($tag !== null) {
            $queryParams['tag'] = $this->apiClient->getSerializer()->toQueryValue($tag);
        }
        // query params
        if ($phone_number !== null) {
            $queryParams['phone_number'] = $this->apiClient->getSerializer()->toQueryValue($phone_number);
        }
        // query params
        if ($first_name !== null) {
            $queryParams['first_name'] = $this->apiClient->getSerializer()->toQueryValue($first_name);
        }
        // query params
        if ($last_name !== null) {
            $queryParams['last_name'] = $this->apiClient->getSerializer()->toQueryValue($last_name);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = $this->apiClient->getSerializer()->toQueryValue($state);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['postcode'] = $this->apiClient->getSerializer()->toQueryValue($postcode);
        }
        // query params
        if ($country !== null) {
            $queryParams['country'] = $this->apiClient->getSerializer()->toQueryValue($country);
        }
        // query params
        if ($organisation !== null) {
            $queryParams['organisation'] = $this->apiClient->getSerializer()->toQueryValue($organisation);
        }
        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($include_converted !== null) {
            $queryParams['include_converted'] = $this->apiClient->getSerializer()->toQueryValue($include_converted);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Lead[]',
                '/Leads/Search'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Lead[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Lead[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getNotes
     *
     * Gets a Lead's Notes
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when note was last updated. (optional)
     * @param int $top Optional, maximum number of notes to return. (optional)
     * @param int $skip Optional, number of notes to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Note[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getNotes($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        list($response) = $this->getNotesWithHttpInfo($id, $updated_after_utc, $top, $skip, $brief, $count_total);
        return $response;
    }

    /**
     * Operation getNotesWithHttpInfo
     *
     * Gets a Lead's Notes
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when note was last updated. (optional)
     * @param int $top Optional, maximum number of notes to return. (optional)
     * @param int $skip Optional, number of notes to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getNotesWithHttpInfo($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getNotes');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Notes";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Note[]',
                '/Leads/{id}/Notes'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Note[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Note[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getTasks
     *
     * Gets a list of Lead's Tasks
     *
     * @param int $id A Lead&#39;s ID (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when task was last updated. (optional)
     * @param int $top Optional, maximum number of tasks to return. (optional)
     * @param int $skip Optional, number of tasks to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return \Swagger\Client\Model\Task[]
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTasks($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        list($response) = $this->getTasksWithHttpInfo($id, $updated_after_utc, $top, $skip, $brief, $count_total);
        return $response;
    }

    /**
     * Operation getTasksWithHttpInfo
     *
     * Gets a list of Lead's Tasks
     *
     * @param int $id A Lead&#39;s ID (required)
     * @param \DateTime $updated_after_utc Optional, earliest date when task was last updated. (optional)
     * @param int $top Optional, maximum number of tasks to return. (optional)
     * @param int $skip Optional, number of tasks to skip. (optional)
     * @param bool $brief true if only top level properties needs to be returned. (optional, default to false)
     * @param bool $count_total true if total number of records should be returned in the response headers. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Task[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function getTasksWithHttpInfo($id, $updated_after_utc = null, $top = null, $skip = null, $brief = null, $count_total = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling getTasks');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Tasks";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($updated_after_utc !== null) {
            $queryParams['updated_after_utc'] = $this->apiClient->getSerializer()->toQueryValue($updated_after_utc);
        }
        // query params
        if ($top !== null) {
            $queryParams['top'] = $this->apiClient->getSerializer()->toQueryValue($top);
        }
        // query params
        if ($skip !== null) {
            $queryParams['skip'] = $this->apiClient->getSerializer()->toQueryValue($skip);
        }
        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // query params
        if ($count_total !== null) {
            $queryParams['count_total'] = $this->apiClient->getSerializer()->toQueryValue($count_total);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Task[]',
                '/Leads/{id}/Tasks'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Task[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Task[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateCustomField
     *
     * Updates a Custom Field
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \Swagger\Client\Model\APICustomField $api_custom_field The Custom Field to edit (just include JSON object as request body) (required)
     * @return \Swagger\Client\Model\CustomField
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateCustomField($id, $api_custom_field)
    {
        list($response) = $this->updateCustomFieldWithHttpInfo($id, $api_custom_field);
        return $response;
    }

    /**
     * Operation updateCustomFieldWithHttpInfo
     *
     * Updates a Custom Field
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param \Swagger\Client\Model\APICustomField $api_custom_field The Custom Field to edit (just include JSON object as request body) (required)
     * @return Array of \Swagger\Client\Model\CustomField, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateCustomFieldWithHttpInfo($id, $api_custom_field)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateCustomField');
        }
        // verify the required parameter 'api_custom_field' is set
        if ($api_custom_field === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_custom_field when calling updateCustomField');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/CustomFields";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_custom_field)) {
            $_tempBody = $api_custom_field;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomField',
                '/Leads/{id}/CustomFields'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomField', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomField', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateImage
     *
     * Updates a Lead's Image
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param string $filename Name of Image File to be attached to Lead (required)
     * @param string $file File to upload (required)
     * @return \Swagger\Client\Model\Lead
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateImage($id, $filename, $file)
    {
        list($response) = $this->updateImageWithHttpInfo($id, $filename, $file);
        return $response;
    }

    /**
     * Operation updateImageWithHttpInfo
     *
     * Updates a Lead's Image
     *
     * @param int $id A Lead&#39;s ID (LEAD_ID) (required)
     * @param string $filename Name of Image File to be attached to Lead (required)
     * @param string $file File to upload (required)
     * @return Array of \Swagger\Client\Model\Lead, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateImageWithHttpInfo($id, $filename, $file)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling updateImage');
        }
        // verify the required parameter 'filename' is set
        if ($filename === null) {
            throw new \InvalidArgumentException('Missing the required parameter $filename when calling updateImage');
        }
        // verify the required parameter 'file' is set
        if ($file === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file when calling updateImage');
        }
        // parse inputs
        $resourcePath = "/Leads/{id}/Image/{filename}";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/octet-stream'));

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                "{" . "id" . "}",
                $this->apiClient->getSerializer()->toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($filename !== null) {
            $resourcePath = str_replace(
                "{" . "filename" . "}",
                $this->apiClient->getSerializer()->toPathValue($filename),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($file)) {
            $_tempBody = $file;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Lead',
                '/Leads/{id}/Image/{filename}'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Lead', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Lead', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateLead
     *
     * Updates a Lead
     *
     * @param \Swagger\Client\Model\APILead $api_lead A Lead (just include JSON object as request body) (required)
     * @param bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Lead. When true, all sub-collections are ignored. (optional, default to false)
     * @return \Swagger\Client\Model\Lead
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateLead($api_lead, $brief = null)
    {
        list($response) = $this->updateLeadWithHttpInfo($api_lead, $brief);
        return $response;
    }

    /**
     * Operation updateLeadWithHttpInfo
     *
     * Updates a Lead
     *
     * @param \Swagger\Client\Model\APILead $api_lead A Lead (just include JSON object as request body) (required)
     * @param bool $brief Optional, true if you wish to do a partial update containing only top level properties of the Lead. When true, all sub-collections are ignored. (optional, default to false)
     * @return Array of \Swagger\Client\Model\Lead, HTTP status code, HTTP response headers (array of strings)
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function updateLeadWithHttpInfo($api_lead, $brief = null)
    {
        // verify the required parameter 'api_lead' is set
        if ($api_lead === null) {
            throw new \InvalidArgumentException('Missing the required parameter $api_lead when calling updateLead');
        }
        // parse inputs
        $resourcePath = "/Leads";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json', 'text/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/json'));

        // query params
        if ($brief !== null) {
            $queryParams['brief'] = $this->apiClient->getSerializer()->toQueryValue($brief);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($api_lead)) {
            $_tempBody = $api_lead;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Lead',
                '/Leads'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Lead', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Lead', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
